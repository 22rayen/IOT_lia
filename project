// Change made by both users
October 11th, 2024 

 

Brainstorming ideas: 

Light chase lane, light range depending on the strength of the outside light 

straight 

"A heater" depending on the temperature 

-------------------------------------------------

 

 

 

We chose to creat3 an LED circuit in which the intensity will be controlled by the strength of the outside ambient light. 

 
The LEDs will have a chase function (extra)


The LEDs will be lit at different intensities depending on that of the light. 
 

Materials: 


LEDs 
Esp32 
Power source 
Resistors 
3D circuit printed 
Raspberry Pi 


// Change by Samir
October 18th, 2024

We uploaded the schematic on another file of how the project is going to function.


// Change by Samir
Thursday, November 21st, 2024 

We have not managed to show 50% of our project implementation, not even close to doing so. 

We have a bit of our code, but the hardware is not yet ready and not done for demonstration.. 


// Change by Samir
Friday, November 22nd, 2024


// rayen

//include libraries
#include <Arduino.h>
#include <WiFi.h>
#include <PubSubClient.h>
//define the pins 
#define LED_1  15
#define LED_2  16
#define LED_3  17
#define LED_4  18
#define LED_5  13
#define LED_6  27
#define LED_7  26
#define LED_8  25
const int photoR = 34; // photoresistor
const int potR = 35; //potentiameter 

//Variables
int power;
int speed;
int value;
int value2;
int delay_off = 0;

//mqtt config

// Wi-Fi credentials: replace with those of your network
const char* ssid = "TOTOLINK_A800R";  // The name of the WiFi network
const char* password = "13042013"; // The WiFi network passkey

//broker details
const char* mqtt_server = "192.168.0.38";
const int mqtt_port = 1883;  // MQTT broker port (1883 is default)
const char* mqtt_topic = "LIA_SR";  // MQTT topic to publish messages
// MQTT client name prefix (will add MAC address)
String name = "Samir_Rayen";

// Create an instance of the WiFiClient class
WiFiClient espClient;
// Create an instance of the PubSubClient class
PubSubClient client(espClient);
// Timer for publishing every 5 seconds
unsigned long previousMillis = 0;
const long interval = 5000;


void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(LED_1, OUTPUT);
  pinMode(LED_2, OUTPUT);
  pinMode(LED_3, OUTPUT);
  pinMode(LED_4, OUTPUT);
  pinMode(LED_5, OUTPUT);
  pinMode(LED_6, OUTPUT);
  pinMode(LED_7, OUTPUT);
  pinMode(LED_8, OUTPUT);
  pinMode(photoR, INPUT);// setting photoresistor as an input for the voltage devider
  pinMode(potR, INPUT);// setting the potentiameter as an input for the voltage devider
  


  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Set MQTT server and port
  client.setServer(mqtt_server, mqtt_port);

}

void loop() {

  //the esp32 doing its job
mesureSpeed();
mesureLight();
chase();

// Connect to MQTT if necessary
  if (!client.connected()) {
    connect();
  }
/*
  // Get the current time unsigned 
  long currentMillis = millis();

  // Publish a message every 5 seconds
  
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
*/
    // Your message to publish
    String message = "brightness " + power;
    String messageln = " speed " + speed;

    // Publish the message to the MQTT topic
    client.publish(mqtt_topic, message.c_str());
    Serial.println("Message sent: Hello all from "  + name);
  

  // Allow the PubSubClient to process incoming messages
  client.loop();

  }


/*I am going to use a 10k ohm resistor for the voltage drop, use it as a percentage of how strong the light should be
it will be something like (basically a map)
max_val = 255 //5v
min_val = 0// 0v
it will basically controll the strength of the leds so the more light the less resistance so more voltage.
less light would mean less voltage and the leds would be dim. 
and for fun I am throwing in the chase.




*/
void mesureLight(){

  value = analogRead(photoR);
  power = map(value, 0, 4095, 255, 0);// suposed to turn the value from the light sensor to how much power would be sent to the led
  Serial.println(value); //by testing the max value was 4095 and the lowest was 0
  Serial.println(power);
  
  delay(100);


}
void mesureSpeed(){
  //value2 = analogRead(potR);
  value2 = 3000;
  speed = map(value2, 0, 4095, 20, 400);
  Serial.println(value2); //by testing the max value was 4095 and the lowest was 0
  Serial.println(speed);

  
}

void connect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.println("Attempting MQTT connection...");

    // Attempt to connect
    if (client.connect(name.c_str())) {
      Serial.println("Connected to MQTT broker");
    } else {
      Serial.print("Failed to connect to MQTT broker, rc=");
      Serial.print(client.state());
      Serial.println("Try again in 5 seconds");
      delay(5000);
    }
  }
}

void chase() {
  analogWrite(LED_1, power);
  delay(speed);
  analogWrite(LED_1, LOW);
  delay(delay_off);

  analogWrite(LED_2, power);
  delay(speed);
  analogWrite(LED_2, LOW);
  delay(delay_off);

  analogWrite(LED_3, power);
  delay(speed);
  analogWrite(LED_3, LOW);
  delay(delay_off);

  analogWrite(LED_4, power);
  delay(speed);
  analogWrite(LED_4, LOW);
  delay(delay_off);

  analogWrite(LED_5, power);
  delay(speed);
  analogWrite(LED_5, LOW);
  delay(delay_off);

  analogWrite(LED_6, power);
  delay(speed);
  analogWrite(LED_6, LOW);
  delay(delay_off);
  
  analogWrite(LED_7, power);
  delay(speed);
  analogWrite(LED_7, LOW);
  delay(delay_off);

  analogWrite(LED_8, power);
  delay(speed);
  analogWrite(LED_8, LOW);
  delay(delay_off);

}









